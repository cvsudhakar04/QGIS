"""QGIS Unit tests for QgsTIN.

.. note:: This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
"""
__author__ = 'Lo√Øc Bartoletti'
__date__ = '29/01/2024'
__copyright__ = 'Copyright 2024, The QGIS Project'

import qgis  # NOQA

from qgis.PyQt.QtCore import QByteArray
from qgis.core import QgsGeometry, QgsMultiPolygon
import unittest
from qgis.testing import start_app, QgisTestCase

start_app()


class TestQgsTIN(QgisTestCase):

    def testWKX(self):
        # standard test wkt/wkb
        tests = [("TIN EMPTY", "011000000000000000"),
                 ("TIN (((0 0, 1 0, 1 1, 0 0)))", "0110000000010000000111000000010000000400000000000000000000000000000000000000000000000000f03f0000000000000000000000000000f03f000000000000f03f00000000000000000000000000000000"),
                 ("TINZ (((0 0 1, 1 0 2, 1 1 3, 0 0 1)))", "01f80300000100000001f9030000010000000400000000000000000000000000000000000000000000000000f03f000000000000f03f00000000000000000000000000000040000000000000f03f000000000000f03f000000000000084000000000000000000000000000000000000000000000f03f"),
                 ("TINM (((0 0 1, 1 0 2, 1 1 3, 0 0 1)))", "01e00700000100000001e1070000010000000400000000000000000000000000000000000000000000000000f03f000000000000f03f00000000000000000000000000000040000000000000f03f000000000000f03f000000000000084000000000000000000000000000000000000000000000f03f"),
                 ("TINZM (((0 0 1 2, 1 0 3 4, 1 1 4 5, 0 0 1 2)))", "01c80b00000100000001c90b0000010000000400000000000000000000000000000000000000000000000000f03f0000000000000040000000000000f03f000000000000000000000000000008400000000000001040000000000000f03f000000000000f03f0000000000001040000000000000144000000000000000000000000000000000000000000000f03f0000000000000040"),
                 ("TIN (((0 0, 1 0, 1 1, 0 0)),((5 5, 6 5, 6 6, 5 5)))", "0110000000020000000111000000010000000400000000000000000000000000000000000000000000000000f03f0000000000000000000000000000f03f000000000000f03f000000000000000000000000000000000111000000010000000400000000000000000014400000000000001440000000000000184000000000000014400000000000001840000000000000184000000000000014400000000000001440"),
                 ("TINZ (((0 0 1, 1 0 2, 1 1 3, 0 0 1)),((5 5 4, 6 5 5, 6 6 6, 5 5 4)))", "01f80300000200000001f9030000010000000400000000000000000000000000000000000000000000000000f03f000000000000f03f00000000000000000000000000000040000000000000f03f000000000000f03f000000000000084000000000000000000000000000000000000000000000f03f01f90300000100000004000000000000000000144000000000000014400000000000001040000000000000184000000000000014400000000000001440000000000000184000000000000018400000000000001840000000000000144000000000000014400000000000001040"),
                 ("TINM (((0 0 1, 1 0 2, 1 1 3, 0 0 1)),((5 5 4, 6 5 5, 6 6 6, 5 5 4)))", "01e00700000200000001e1070000010000000400000000000000000000000000000000000000000000000000f03f000000000000f03f00000000000000000000000000000040000000000000f03f000000000000f03f000000000000084000000000000000000000000000000000000000000000f03f01e10700000100000004000000000000000000144000000000000014400000000000001040000000000000184000000000000014400000000000001440000000000000184000000000000018400000000000001840000000000000144000000000000014400000000000001040"),
                 ("TINZM (((0 0 1 2, 1 0 2 3, 1 1 3 4, 0 0 1 2)),((5 5 4 5, 6 5 5 6, 6 6 6 7, 5 5 4 5)))", "01c80b00000200000001c90b0000010000000400000000000000000000000000000000000000000000000000f03f0000000000000040000000000000f03f000000000000000000000000000000400000000000000840000000000000f03f000000000000f03f0000000000000840000000000000104000000000000000000000000000000000000000000000f03f000000000000004001c90b00000100000004000000000000000000144000000000000014400000000000001040000000000000144000000000000018400000000000001440000000000000144000000000000018400000000000001840000000000000184000000000000018400000000000001c400000000000001440000000000000144000000000000010400000000000001440")]

        for test in tests:
            wkt, wkb = test
            # Test fromWkb
            ba = QByteArray.fromHex(wkb.encode("utf-8"))
            geom = QgsGeometry()
            geom.fromWkb(ba)
            self.assertEqual(geom.asWkt(0), wkt.replace("TIN", "MultiPolygon"))
            # Test fromWkt
            geom = QgsGeometry().fromWkt(wkt)
            self.assertEqual(geom.asWkt(0), wkt.replace("TIN", "MultiPolygon"))

        # "real" wkt/wkb
        wkt = "TIN (((5.12353046 5.63438799,5.01309128 6.00706177,3.76285872 5.64985247,5.12353046 5.63438799)),((5.01309128 6.00706177,6.45681221 5.36706177,6.39727733 6.82566643,5.01309128 6.00706177)),((5.01309128 6.00706177,4.43262616 6.73636410,3.76285872 5.64985247,5.01309128 6.00706177)),((6.45681221 5.36706177,5.12353046 5.63438799,3.76285872 5.64985247,6.45681221 5.36706177)),((6.45681221 5.36706177,5.01309128 6.00706177,5.12353046 5.63438799,6.45681221 5.36706177)),((4.43262616 6.73636410,5.01309128 6.00706177,6.39727733 6.82566643,4.43262616 6.73636410)))"
        wkb = "01100000000600000001110000000100000004000000120ad7c47e7e1440c71958019d891640e3d9edcc670d1440b8ce5c333b07184087f22eac551a0e40d17f07ed72991640120ad7c47e7e1440c71958019d89164001110000000100000004000000e3d9edcc670d1440b8ce5c333b07184035747994c6d31940290c670adf771540362b4fdecf961940320529807b4d1b40e3d9edcc670d1440b8ce5c333b07184001110000000100000004000000e3d9edcc670d1440b8ce5c333b0718405260225a02bb11403dcb3d6e09f21a4087f22eac551a0e40d17f07ed72991640e3d9edcc670d1440b8ce5c333b0718400111000000010000000400000035747994c6d31940290c670adf771540120ad7c47e7e1440c71958019d89164087f22eac551a0e40d17f07ed7299164035747994c6d31940290c670adf7715400111000000010000000400000035747994c6d31940290c670adf771540e3d9edcc670d1440b8ce5c333b071840120ad7c47e7e1440c71958019d89164035747994c6d31940290c670adf771540011100000001000000040000005260225a02bb11403dcb3d6e09f21a40e3d9edcc670d1440b8ce5c333b071840362b4fdecf961940320529807b4d1b405260225a02bb11403dcb3d6e09f21a40"
        wkt4expected = "MultiPolygon (((5.1235 5.6344, 5.0131 6.0071, 3.7629 5.6499, 5.1235 5.6344)),((5.0131 6.0071, 6.4568 5.3671, 6.3973 6.8257, 5.0131 6.0071)),((5.0131 6.0071, 4.4326 6.7364, 3.7629 5.6499, 5.0131 6.0071)),((6.4568 5.3671, 5.1235 5.6344, 3.7629 5.6499, 6.4568 5.3671)),((6.4568 5.3671, 5.0131 6.0071, 5.1235 5.6344, 6.4568 5.3671)),((4.4326 6.7364, 5.0131 6.0071, 6.3973 6.8257, 4.4326 6.7364)))"
        ba = QByteArray.fromHex(wkb.encode("utf-8"))
        geom = QgsGeometry()
        geom.fromWkb(ba)
        self.assertEqual(geom.asWkt(4), wkt4expected)

        geom = QgsGeometry().fromWkt(wkt)
        self.assertEqual(geom.asWkt(4), wkt4expected)


if __name__ == '__main__':
    unittest.main()
