/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsfieldmappingwidget.h                                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/



class QgsFieldMappingWidget : QWidget
{
%Docstring
The QgsFieldMappingWidget class creates a mapping from one set of QgsFields to another,
for each set of "destination" fields an expression defines how to obtain the values of the
"destination" fields.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsfieldmappingwidget.h"
%End
  public:

    explicit QgsFieldMappingWidget( const QgsFields &sourceFields = QgsFields(),
                                    const QgsFields &destinationFields = QgsFields(),
                                    const QMap<QString, QgsExpression> &expressions = QMap<QString, QgsExpression>(),
                                    QWidget *parent = 0 );
%Docstring
Constructs a QgsFieldMappingWidget from a set of ``sourceFields``
and ``destinationFields``, initial values for the expressions can be
optionally specified through ``expressions`` which is a map from the original
field name to the corresponding expression.

:param parent: parent object
%End

    void setDestinationEditable( bool editable );
%Docstring
Sets the destination fields editable state to ``ditable``
%End

    bool destinationEditable() const;
%Docstring
Returns ``True`` if the destination fields are editable in the model
%End

    QgsFieldMappingModel *model() const;
%Docstring
Returns the underlying mapping model
%End

    QList<QgsFieldMappingModel::Field> mapping() const;
%Docstring
Returns a list of Field objects representing the current status of the underlying mapping model
%End

    QItemSelectionModel *selectionModel();
%Docstring
Returns the selection model
%End

    void setSourceFields( const QgsFields &sourceFields );
%Docstring
Set source fields of the underlying mapping model to ``sourceFields``
%End

    void setDestinationFields( const QgsFields &destinationFields,
                               const QMap<QString, QgsExpression> &expressions = QMap<QString, QgsExpression>() );
%Docstring
Set destination fields to ``destinationFields`` in the underlying model,
initial values for the expressions can be optionally specified through
``expressions`` which is a map from the original field name to the
corresponding expression.
%End

  public slots:

    void appendField( const QgsField &field, const QgsExpression &expression = QgsExpression() );
%Docstring
Appends a new ``field`` to the model, with an optional ``expression``
%End

    bool removeSelectedFields( );
%Docstring
Removes the currently selected field from the model
%End

    bool moveSelectedFieldsUp( );
%Docstring
Moves down currently selected field
%End

    bool moveSelectedFieldsDown( );
%Docstring
Moves up the currently selected field
%End

      public:
      public:
};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsfieldmappingwidget.h                                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
