/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsfieldmappingmodel.h                                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/




class QgsFieldMappingModel: QAbstractTableModel
{
%Docstring
The QgsFieldMappingModel holds mapping information for mapping from one set of QgsFields to another,
for each set of "destination" fields an expression defines how to obtain the values of the
"destination" fields.
The model can be optionally set "editable" allowing to modify all the fields, by default only
the mapping expression is editable.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsfieldmappingmodel.h"
%End
  public:

    enum ColumnDataIndex
    {
      SourceExpression,
      DestinationName,
      DestinationType,
      DestinationLength,
      DestinationPrecision
    };

    struct Field
    {
      QString originalName;
      QgsField field;
      QgsExpression expression;
    };

    QgsFieldMappingModel( const QgsFields &sourceFields,
                          const QgsFields &destinationFields,
                          const QMap<QString, QgsExpression> &expressions = QMap<QString, QgsExpression>(),
                          QObject *parent = 0 );
%Docstring
Constructs a QgsFieldMappingModel from a set of ``sourceFields``
and ``destinationFields``, initial values for the expressions can be
optionally specified through ``expressions`` which is a map from the original
field name to the corresponding expression.

:param parent: parent object
%End

    QgsExpressionContextGenerator *contextGenerator() const;
%Docstring
Returns the context generator with the source fields
%End

    bool destinationEditable() const;
%Docstring
Returns ``True`` if the destination fields are editable
%End

    void setDestinationEditable( bool editable );
%Docstring
Sets the destination fields editable state to ``editable``
%End

    const QMap<QVariant::Type, QString> dataTypes() const;
%Docstring
Returns a static map of supported data types
%End

    QgsFields sourceFields() const;
%Docstring
Returns a list of source fields
%End

    QList<QgsFieldMappingModel::Field> mapping() const;
%Docstring
Returns a list of Field objects representing the current status of the model
%End

    void appendField( const QgsField &field, const QgsExpression &expression = QgsExpression() );
%Docstring
Appends a new ``field`` to the model, with an optional ``expression``
%End

    bool removeField( const QModelIndex &index );
%Docstring
Removes the field at ``index`` from the model, returns ``True`` on success
%End

    bool moveUp( const QModelIndex &index );
%Docstring
Moves down the field at ``index``
%End

    bool moveDown( const QModelIndex &index );
%Docstring
Moves up the field at ``index``
%End

    virtual int rowCount( const QModelIndex &parent ) const;

    virtual int columnCount( const QModelIndex &parent ) const;

    virtual QVariant data( const QModelIndex &index, int role ) const;

    virtual QVariant headerData( int section, Qt::Orientation orientation, int role ) const;

    virtual Qt::ItemFlags flags( const QModelIndex &index ) const;

    virtual bool setData( const QModelIndex &index, const QVariant &value, int role );


      public:
};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsfieldmappingmodel.h                                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
