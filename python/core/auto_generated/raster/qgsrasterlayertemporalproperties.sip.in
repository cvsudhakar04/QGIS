/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgsrasterlayertemporalproperties.h                   *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsRasterLayerTemporalProperties : QgsMapLayerTemporalProperties
{
%Docstring
Implementation of map layer temporal properties for raster layers.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsrasterlayertemporalproperties.h"
%End
  public:

    QgsRasterLayerTemporalProperties( QObject *parent = 0, bool enabled = false );
%Docstring
Constructor for QgsRasterLayerTemporalProperties.

The ``enabled`` argument specifies whether the temporal properties are initially enabled or not (see isActive()).
%End

    virtual ~QgsRasterLayerTemporalProperties();

    enum TemporalMode
    {
      ModeFixedTemporalRange,
      ModeTemporalRangeFromDataProvider,
    };

    TemporalMode mode() const;
%Docstring
Returns the temporal properties mode.

.. seealso:: :py:func:`setMode`
%End

    void setMode( TemporalMode mode );
%Docstring
Sets the temporal properties ``mode``.

.. seealso:: :py:func:`mode`
%End

    enum FetchMode
    {
      Earliest,
      Latest,
      Range
    };

    FetchMode fetchMode() const;
%Docstring
Returns the temporal properties fetch mode.

.. seealso:: :py:func:`setFetchMode`
%End

    void setFetchMode( FetchMode mode );
%Docstring
Sets the temporal properties fetch ``mode``.

.. seealso:: :py:func:`fetchMode`
%End

    void setFixedTemporalRange( const QgsDateTimeRange &range );
%Docstring
Sets a temporal ``range`` to apply to the whole layer. All bands from
the raster layer will be rendered whenever the current datetime range of
a render context intersects the specified ``range``.

For the case of WMS-T layers, this set up will cause new WMS layer to be fetched
with which the range of the render context intersects the specified ``range``.

.. warning::

   This setting is only effective when mode() is
   QgsRasterLayerTemporalProperties.ModeFixedTemporalRange

.. note::

   This setting is not set by user. Provider can set this, if it is coming from there.


.. seealso:: :py:func:`fixedTemporalRange`
%End

    const QgsDateTimeRange &fixedTemporalRange() const;
%Docstring
Returns the fixed temporal range for the layer.

.. warning::

   To be used only when mode() is
   QgsRasterLayerTemporalProperties.ModeFixedTemporalRange

.. seealso:: :py:func:`setFixedTemporalRange`
%End

    void setFixedReferenceTemporalRange( const QgsDateTimeRange &range );
%Docstring
Sets a fixed reference temporal ``range`` to apply to the whole layer. All bands from
the raster layer will be rendered whenever the current datetime range of
a render context intersects the specified ``range``.

For the case of WMS-T layers, this set up will cause new WMS layer to be fetched
with which the range of the render context intersects the specified ``range``.

.. warning::

   This setting is only effective when mode() is
   QgsRasterLayerTemporalProperties.ModeFixedTemporalRange

.. note::

   This setting is not set by user. Provider can set this, if it is coming from there.


.. seealso:: :py:func:`fixedReferenceTemporalRange`
%End

    const QgsDateTimeRange &fixedReferenceTemporalRange() const;
%Docstring
Returns the fixed reference temporal range for the layer.

.. warning::

   To be used only when mode() is
   QgsRasterLayerTemporalProperties.ModeFixedTemporalRange

.. seealso:: :py:func:`setFixedReferenceTemporalRange`
%End

    void setTemporalRange( const QgsDateTimeRange &dateTimeRange );
%Docstring
Sets the current active datetime range for the temporal properties.

.. note::

   This can be set by user, through raster layer properties widget.

.. seealso:: :py:func:`temporalRange`
%End

    const QgsDateTimeRange &temporalRange() const;
%Docstring
Returns the current active datetime range for these temporal properties.

.. seealso:: :py:func:`setTemporalRange`
%End

    void setReferenceTemporalRange( const QgsDateTimeRange &dateTimeRange );
%Docstring
Sets the current active reference datetime range for the temporal properties.

This will be used by bi-temporal data.

.. note::

   This can be set by user, through raster layer properties widget.

.. seealso:: :py:func:`referenceTemporalRange`
%End

    const QgsDateTimeRange &referenceTemporalRange() const;
%Docstring
Returns the current active reference datetime range for these temporal properties.

.. seealso:: :py:func:`setReferenceTemporalRange`
%End

    virtual QDomElement writeXml( QDomElement &element, QDomDocument &doc, const QgsReadWriteContext &context );


    virtual bool readXml( const QDomElement &element, const QgsReadWriteContext &context );


    TemporalMode indexToMode( int index );
%Docstring
Returns the temporal mode given index
%End

    FetchMode indexToFetchMode( int index );
%Docstring
Returns the temporal fetch mode given index
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgsrasterlayertemporalproperties.h                   *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
