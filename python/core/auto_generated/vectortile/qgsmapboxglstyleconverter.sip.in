/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vectortile/qgsmapboxglstyleconverter.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/




class QgsMapBoxGlStyleConverter
{
%Docstring
Handles conversion of MapBox GL styles to QGIS vector tile renderers and labeling
settings.

.. versionadded:: 3.16
%End

%TypeHeaderCode
#include "qgsmapboxglstyleconverter.h"
%End
  public:

    QgsMapBoxGlStyleConverter( const QVariantMap &style, const QString &styleName = QString() );
%Docstring
Constructor for QgsMapBoxGlStyleConverter.

The specified MapBox GL ``style`` configuration will be converted.
%End


    ~QgsMapBoxGlStyleConverter();

    QString errorMessage() const;
%Docstring
Returns a descriptive error message if an error was encountered during the style conversion,
or an empty string if no error was encountered.
%End

    QgsVectorTileRenderer *renderer() const /Factory/;
%Docstring
Returns a new instance of a vector tile renderer representing the converted style,
or ``None`` if the style could not be converted successfully.
%End

    QgsVectorTileLabeling *labeling() const /Factory/;
%Docstring
Returns a new instance of a vector tile labeling representing the converted style,
or ``None`` if the style could not be converted successfully.
%End

  protected:

    enum PropertyType
    {
      Color,
      Line,
      Opacity,
      Text
    };

    void parseLayers( const QVariantList &layers, const QString &styleName );
%Docstring
Parse list of ``layers`` from JSON
%End

    static bool parseFillLayer( const QVariantMap &jsonLayer, const QString &styleName, QgsVectorTileBasicRendererStyle &style /Out/ );
%Docstring
Parses a fill layer.

:param jsonLayer: fill layer to parse
:param styleName: style name

:return: - ``True`` if the layer was successfully parsed.
         - style: generated QGIS vector tile style
%End

    static bool parseLineLayer( const QVariantMap &jsonLayer, const QString &styleName, QgsVectorTileBasicRendererStyle &style /Out/ );
%Docstring
Parses a line layer.

:param jsonLayer: fill layer to parse
:param styleName: style name

:return: - ``True`` if the layer was successfully parsed.
         - style: generated QGIS vector tile style
%End

    static void parseSymbolLayer( const QVariantMap &jsonLayer, const QString &styleName,
                                  QgsVectorTileBasicRendererStyle &rendererStyle /Out/,
                                  bool &hasRenderer /Out/,
                                  QgsVectorTileBasicLabelingStyle &labelingStyle /Out/,
                                  bool &hasLabeling /Out/ );
%Docstring
Parses a symbol layer.

:param jsonLayer: fill layer to parse
:param styleName: style name
:param rendererStyle: generated QGIS vector tile style
:param hasRenderer: will be set to ``True`` if symbol layer generated a renderer style
:param labelingStyle: generated QGIS vector tile labeling
%End


    static QgsProperty parseInterpolateColorByZoom( const QVariantMap &json );
    static QgsProperty parseInterpolateByZoom( const QVariantMap &json, double multiplier = 1 );

    static QgsProperty parseInterpolateOpacityByZoom( const QVariantMap &json );
%Docstring
Interpolates opacity with either :py:func:`~QgsMapBoxGlStyleConverter.scale_linear` or :py:func:`~QgsMapBoxGlStyleConverter.scale_exp` (depending on base value).
For ``json`` with intermediate stops it uses :py:func:`~QgsMapBoxGlStyleConverter.parseOpacityStops` function.
It uses QGIS :py:func:`~QgsMapBoxGlStyleConverter.set_color_part` function to set alpha component of color.
%End

    static QString parseOpacityStops( double base, const QVariantList &stops );
%Docstring
Takes values from stops and uses either :py:func:`~QgsMapBoxGlStyleConverter.scale_linear` or :py:func:`~QgsMapBoxGlStyleConverter.scale_exp` functions
to interpolate alpha component of color.
%End

    static QString parseStops( double base, const QVariantList &stops, double multiplier );

    static QgsProperty parseInterpolateListByZoom( const QVariantList &json, PropertyType type, double multiplier = 1 );
%Docstring
Interpolates a list which starts with the interpolate function.
%End

    static QColor parseColor( const QVariant &color );
%Docstring
Parses a ``color`` in one of these supported formats:

- #fff or #ffffff
- hsl(30, 19%, 90%) or hsla(30, 19%, 90%, 0.4)
- rgb(10, 20, 30) or rgba(10, 20, 30, 0.5)

Returns an invalid color if the color could not be parsed.
%End

    static void colorAsHslaComponents( const QColor &color, int &hue, int &saturation, int &lightness, int &alpha );
%Docstring
Takes a QColor object and returns HSLA components in required format for QGIS :py:func:`~QgsMapBoxGlStyleConverter.color_hsla` expression function.

:param color: input color
:param hue: an integer value from 0 to 360
:param saturation: an integer value from 0 to 100
:param lightness: an integer value from 0 to 100
:param alpha: an integer value from 0 (completely transparent) to 255 (opaque).
%End

    static QString interpolateExpression( int zoomMin, int zoomMax, double valueMin, double valueMax, double base );
%Docstring
Generates an interpolation for values between ``valueMin`` and ``valueMax``, scaled between the
ranges ``zoomMin`` to ``zoomMax``.
%End

    static Qt::PenCapStyle parseCapStyle( const QString &style );
%Docstring
Converts a value to Qt.PenCapStyle enum from JSON value.
%End

    static Qt::PenJoinStyle parseJoinStyle( const QString &style );
%Docstring
Converts a value to Qt.PenJoinStyle enum from JSON value.
%End

    static QString parseExpression( const QVariantList &expression );
%Docstring
Converts a MapBox GL expression to a QGIS expression.
%End

  private:
    QgsMapBoxGlStyleConverter( const QgsMapBoxGlStyleConverter &other );
};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vectortile/qgsmapboxglstyleconverter.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
