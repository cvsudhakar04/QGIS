/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vectortile/qgsvectortilewriter.h                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsVectorTileWriter
{
%Docstring
Takes care of writing vector tiles. The intended use is to set up the class
by setting the destination URI, extent, zoom level range and input vector
layers. Then with a call to writeTiles() the data gets written. In case
of a failure, errorMessage() returns the cause of the problem during writing.

The syntax of destination URIs is the same like the data source string
used by vector tile layers: parameters are encoded as a HTTP query string,
where "type" key determines the type of the destination container,
the "url" key is normally the path. Currently supported types:

- "xyz" - tile data written as local files, using a template where {x},{y},{z}
are replaced by the actual tile column, row and zoom level numbers, e.g.:
file:///home/qgis/tiles/{z}/{x}/{y}.pbf

(More types such as "mbtiles" or "gpkg" may be added later.)

Currently the writer only support MVT encoding of data.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsvectortilewriter.h"
%End
  public:
    QgsVectorTileWriter();

    class Layer
{
%Docstring
Configuration of a single input vector layer to be included in the output

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsvectortilewriter.h"
%End
      public:
        explicit Layer( QgsVectorLayer *layer );
%Docstring
Constructs an entry for a vector layer
%End

        QgsVectorLayer *layer() const;
%Docstring
Returns vector layer of this entry
%End

    };

    void setDestinationUri( const QString &uri );
%Docstring
Sets where and how the vector tiles will be written.
See the class description about the syntax of destination URIs.
%End

    void setExtent( const QgsRectangle &extent );
%Docstring
Sets extent of vector tile output. Currently always in EPSG:3857.
If unset, it will use the standard range of the Web Mercator system.
%End

    void setMinZoom( int minZoom );
%Docstring
Sets the minimum zoom level of tiles. Allowed values are in interval [0,24]
%End
    void setMaxZoom( int maxZoom );
%Docstring
Sets the maximum zoom level of tiles. Allowed values are in interval [0,24]
%End

    void setLayers( const QList<QgsVectorTileWriter::Layer> &layers );
%Docstring
Sets vector layers and their configuration for output of vector tiles
%End

    bool writeTiles( QgsFeedback *feedback = 0 );
%Docstring
Writes vector tiles according to the configuration.
Returns true on success (upon failure one can get error cause using errorMessage())

If a pointer to a feedback object is provided, it can be used to track progress or
provide cancellation functionality.
%End

    QString errorMessage() const;
%Docstring
Returns error message related to the previous call to writeTiles(). Will return
an empty string if writing was successful.
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vectortile/qgsvectortilewriter.h                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
