/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgsorientedbox3d.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/






class QgsOrientedBox3D
{
%Docstring(signature="appended")
Represents a oriented (rotated) box in 3 dimensions.

.. warning::

   Non-stable API, exposed to Python for unit testing only.

.. versionadded:: 3.34
%End

%TypeHeaderCode
#include "qgsorientedbox3d.h"
%End
  public:

    QgsOrientedBox3D();
%Docstring
Constructor for a null oriented box.
%End

    QgsOrientedBox3D( const QList<double> &center, const QList< double > &halfAxes );
%Docstring
Constructor for a oriented box, with a specified center and half axes matrix.
%End

    QgsOrientedBox3D( const QgsVector3D &center, const QList< QgsVector3D > &halfAxes );
%Docstring
Constructor for a oriented box, with a specified center and half axes matrix.
%End

    bool operator==( const QgsOrientedBox3D &other ) const;

    bool operator!=( const QgsOrientedBox3D &other ) const;

    bool isNull() const;
%Docstring
Returns ``True`` if the box is a null box.
%End

    double centerX() const;
%Docstring
Returns the center x-coordinate.

.. seealso:: :py:func:`centerY`

.. seealso:: :py:func:`centerZ`
%End

    double centerY() const;
%Docstring
Returns the center y-coordinate.

.. seealso:: :py:func:`centerX`

.. seealso:: :py:func:`centerZ`
%End

    double centerZ() const;
%Docstring
Returns the center z-coordinate.

.. seealso:: :py:func:`centerX`

.. seealso:: :py:func:`centerY`
%End

    QgsVector3D center() const;
%Docstring
Returns the vector to the center of the box.
%End


    QList< double > halfAxesList() const /PyName=halfAxes/;
%Docstring
Returns the half axes matrix;
%End

    QgsBox3D extent() const;
%Docstring
Returns the overall bounding box of the object.
%End

    QVector< QgsVector3D > corners() const;
%Docstring
Returns an array of all corners as 3D vectors.
%End

    QgsVector3D size() const;
%Docstring
Returns size of sides of the box.
%End

    QgsVector3D projectOnto( const QgsVector3D &vector ) const;
%Docstring
Calculates the projection of the box onto a ``vector``.
%End

    QgsBox3D reprojectedExtent( const QgsCoordinateTransform &ct ) const throw( QgsCsException );
%Docstring
Reprojects corners of this box using the given coordinate ``transform``
and returns axis-aligned box containing reprojected corners.

:raises QgsCsException: 
%End

    QgsOrientedBox3D transformed( const QgsMatrix4x4 &transform ) const;
%Docstring
Returns box transformed by a 4x4 matrix.
%End

    bool intersects( const QgsOrientedBox3D &other ) const;
%Docstring
Returns ``True`` if the box intersects the ``other`` box.
%End

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgsorientedbox3d.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
