/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgsquadrilateral.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsQuadrilateral
{
%Docstring
Quadrilateral (Quadrilateral) geometry type.

.. versionadded:: 3.6
%End

%TypeHeaderCode
#include "qgsquadrilateral.h"
%End
  public:
    QgsQuadrilateral();

    QgsQuadrilateral( const QgsPoint &p1, const QgsPoint &p2, const QgsPoint &p3, const QgsPoint &p4 );
%Docstring
Construct a QgsQuadrilateral from three :py:class:`QgsPoint`.

:param p1: first point
:param p2: second point
:param p3: third point
:param p4: fourth point
%End

    explicit QgsQuadrilateral( const QgsPointXY &p1, const QgsPointXY &p2, const QgsPointXY &p3, const QgsPointXY &p4 );
%Docstring
Construct a QgsQuadrilateral from four :py:class:`QgsPoint`.

:param p1: first point
:param p2: second point
:param p3: third point
:param p4: fourth point
%End


    enum ConstructionOption
    {
      Distance,
      Projected,
    };

    static QgsQuadrilateral rectangleFrom3points( const QgsPoint &p1, const QgsPoint &p2, const QgsPoint &p3, ConstructionOption mode );
%Docstring

Construct a QgsQuadrilateral as a Rectangle from 3 points.

:param p1: first point
:param p2: second point
:param p3: third point
:param mode: Construction mode to construct the rectangle from 3 points

.. seealso:: ConstructionOption
%End
    static QgsQuadrilateral rectangleFromExtent( const QgsPoint &p1, const QgsPoint &p2 );

    static QgsQuadrilateral squareFromDiagonal( const QgsPoint &p1, const QgsPoint &p2 );
    static QgsQuadrilateral rectangleFromCenterPoint( const QgsPoint &center, const QgsPoint &point );
    static QgsQuadrilateral fromRectangle( const QgsRectangle &rectangle );

    bool operator==( const QgsQuadrilateral &other ) const;
    bool operator!=( const QgsQuadrilateral &other ) const;

    bool isEmpty() const;
    enum Point
    {
      Point1,
      Point2,
      Point3,
      Point4,
    };

    void setPoint( const QgsPoint &newPoint, Point index );
    void setPoints( const QgsPoint &p1, const QgsPoint &p2, const QgsPoint &p3, const QgsPoint &p4 );

    QgsPointSequence points() const;
%Docstring
Returns a list including the vertices of the quadrilateral.
%End

    QgsPolygon *toPolygon( bool force2D = false ) const /Factory/;
%Docstring
Returnns as a new polygon. Ownership is transferred to the caller.
%End

    QgsLineString *toLineString( bool force2D = false ) const /Factory/;
%Docstring
Returnns as a new linestring. Ownership is transferred to the caller.
%End

    QString toString( int pointPrecision = 17 ) const;
%Docstring
Returns a string representation of the quadrilateral.
Members will be truncated to the specified precision.
%End

    double area() const;
%Docstring
Returns the area.
Returns 0 if the quadrilateral is empty.
%End

    double perimeter() const;
%Docstring
Returns the perimeter.
Returns 0 if the quadrilateral is empty.
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgsquadrilateral.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
