/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/validity/qgsabstractvaliditycheck.h                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/



class QgsValidityCheckResult
{
%Docstring
Represents an individual result from a validity check run by a QgsAbstractValidityCheck subclass.

Results can either be warnings or critical errors, as dictated by the type member. Critical error
are errors which are serious enough to prevent an operation from proceeding, while a warning
result will be communicated to users, but not prevent them from proceeding.

.. versionadded:: 3.6
%End

%TypeHeaderCode
#include "qgsabstractvaliditycheck.h"
%End
  public:

    enum Type
    {
      Warning,
      Critical,
    };

    Type type;

    QString title;

    QString detailedDescription;

    QString checkId;

};


class QgsAbstractValidityCheck : QObject
{
%Docstring
Abstract base class for individual validity checks.

Validity checks represent objects which can run a test using a :py:class:`QgsValidityCheckContext`, and return
the results of the check via QgsValidityCheckResult objects.

Checks can be used for many different use cases, e.g. validating a layout's contents before allowing
an export to occur, or validating the contents of a Processing model (and warning if required plugin based
providers are not available or if compulsory algorithm parameters have not been populated).

Subclasses must indicate the type of check the represent via the checkType() method. When checks are performed,
all the registered checks with a matching check type are performed sequentially. The check type also
dictates the subclass of the QgsValidityCheckContext which is given to the subclass' runCheck method.

Checks must be registered in the application's :py:class:`QgsValidityCheckRegistry`, which is accessible via
:py:func:`QgsApplication.validityCheckRegistry()`

.. seealso:: :py:class:`QgsValidityCheckRegistry`

.. versionadded:: 3.6
%End

%TypeHeaderCode
#include "qgsabstractvaliditycheck.h"
%End
  public:

    enum Type
    {
      TypeLayoutCheck,
      TypeUserCheck,
    };

    virtual QString id() const = 0;
%Docstring
Returns the unique ID of the check.
%End

    virtual int checkType() const = 0;
%Docstring
Returns the type of the check.
%End

    virtual QString name() const = 0;
%Docstring
Returns the name of the check.
%End

    virtual QList< QgsValidityCheckResult > runCheck( const QgsValidityCheckContext *context, QgsFeedback *feedback ) const = 0;
%Docstring
Runs the check and returns a list of results. If the check is "passed" and no warnings or errors are generated,
then an empty list should be returned.

The ``context`` argument gives the wider in which the check is being run.
%End

};




/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/validity/qgsabstractvaliditycheck.h                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
