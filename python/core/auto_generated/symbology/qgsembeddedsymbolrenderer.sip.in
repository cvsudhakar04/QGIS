/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/symbology/qgsembeddedsymbolrenderer.h                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/


class QgsEmbeddedSymbolRenderer : QgsFeatureRenderer
{
%Docstring

A vector feature renderer which uses embedded feature symbology to render per-feature
symbols.

This renderer can be used for vector layers with a data provider which supports the
:py:class:`QgsVectorDataProvider`.FeatureSymbology capability, where the dataset has embedded information
on how each feature should be rendered.

.. versionadded:: 3.20
%End

%TypeHeaderCode
#include "qgsembeddedsymbolrenderer.h"
%End
  public:

    QgsEmbeddedSymbolRenderer();
%Docstring
Constructor for QgsEmbeddedSymbolRenderer.
%End
    ~QgsEmbeddedSymbolRenderer();

    virtual QgsSymbol *symbolForFeature( const QgsFeature &feature, QgsRenderContext &context ) const;

    virtual QgsSymbol *originalSymbolForFeature( const QgsFeature &feature, QgsRenderContext &context ) const;

    virtual void startRender( QgsRenderContext &context, const QgsFields &fields );

    virtual bool renderFeature( const QgsFeature &feature, QgsRenderContext &context, int layer = -1, bool selected = false, bool drawVertexMarker = false ) throw( QgsCsException );

    virtual void stopRender( QgsRenderContext &context );

    virtual QSet<QString> usedAttributes( const QgsRenderContext &context ) const;

    virtual bool usesEmbeddedSymbols() const;

    virtual QgsEmbeddedSymbolRenderer *clone() const /Factory/;

    virtual QgsFeatureRenderer::Capabilities capabilities();

    virtual QDomElement save( QDomDocument &doc, const QgsReadWriteContext &context );


    static QgsFeatureRenderer *create( QDomElement &element, const QgsReadWriteContext &context ) /Factory/;
%Docstring
Creates a new embedded symbol renderer from an XML ``element``, using the supplied read/write ``context``.

The caller takes ownership of the returned renderer.
%End

  private:
    QgsEmbeddedSymbolRenderer( const QgsEmbeddedSymbolRenderer & );
    QgsEmbeddedSymbolRenderer &operator=( const QgsEmbeddedSymbolRenderer & );
};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/symbology/qgsembeddedsymbolrenderer.h                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
