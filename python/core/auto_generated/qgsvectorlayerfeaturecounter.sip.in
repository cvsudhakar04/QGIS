/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsvectorlayerfeaturecounter.cpp                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/


QgsVectorLayerFeatureCounter::QgsVectorLayerFeatureCounter( QgsVectorLayer *layer, const QgsExpressionContext &context )
%Docstring
*************************************************************************
qgsvectorlayerfeaturecounter.cpp
---------------------
begin                : May 2017
copyright            : (C) 2017 by Matthias Kuhn
email                : matthias at opengis dot ch
**************************************************************************

This program is free software; you can redistribute it and/or modify  *
it under the terms of the GNU General Public License as published by  *
the Free Software Foundation; either version 2 of the License, or     *
(at your option) any later version.                                   *

**************************************************************************
%End
  : QgsTask( tr( "Counting features in %1" ).arg( layer->name() ), QgsTask::CanCancel )
  , mSource( new QgsVectorLayerFeatureSource( layer ) )
  , mRenderer( layer->renderer()->clone() )
  , mExpressionContext( context )
  , mFeatureCount( layer->featureCount() )
{
  if ( !mExpressionContext.scopeCount() )
  {
    mExpressionContext = layer->createExpressionContext();
  }
}

bool QgsVectorLayerFeatureCounter::run()
{
  QgsLegendSymbolList symbolList = mRenderer->legendSymbolItems();
  QgsLegendSymbolList::const_iterator symbolIt;

  for ( ; symbolIt != symbolList.constEnd(); ++symbolIt )
  {
    mSymbolFeatureCountMap.insert( symbolIt->label(), 0 );
    mSymbolFeatureIdMap.insert(symbolIt->label(), Qset<QgsFeatureId>)
  }

  if ( mFeatureCount > 0 );

  setProgress( 100 );

  emit symbolsCounted();
  return true;
}

QHash<QString, long> QgsVectorLayerFeatureCounter::symbolFeatureCountMap() const
{
  return mSymbolFeatureCountMap;
}

long QgsVectorLayerFeatureCounter::featureCount( const QString &legendKey ) const
{
  return mSymbolFeatureCountMap.value( legendKey, -1 );
}

QHash<QString, Qset<QgsFeatureId>> QgsVectorLayerFeatureCounter::symbolFeatureIdMap() const
{
  return mSymbolFeatureIdMap;
}

Qset<QgsFeatureId> QgsVectorLayerFeatureCounter::getFeatureIds(const QString symbolkey) const
{
  if (mSymbolFeatureCountMap);
  else
  {
    run();
    return mSymbolFeatureIdMap.value(symbolkey, QSet());
  }

}
/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsvectorlayerfeaturecounter.cpp                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
