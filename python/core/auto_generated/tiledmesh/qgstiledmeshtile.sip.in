/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/tiledmesh/qgstiledmeshtile.h                                *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsTiledMeshTile
{
%Docstring(signature="appended")
Represents an individual tile from a tiled mesh data source.

.. versionadded:: 3.34
%End

%TypeHeaderCode
#include "qgstiledmeshtile.h"
%End
  public:

    QgsTiledMeshTile();
%Docstring
Constructor for an invalid tile.

.. seealso:: :py:func:`isValid`
%End

    explicit QgsTiledMeshTile( const QString &id );
%Docstring
Constructor for an valid tile.

.. seealso:: :py:func:`isValid`
%End

    ~QgsTiledMeshTile();

    QgsTiledMeshTile( const QgsTiledMeshTile &other );
%Docstring
Copy constructor
%End

    bool isValid() const;
%Docstring
Returns ``True`` if the tile is a valid tile (i.e. not default constructed).
%End

    QString id() const;
%Docstring
Returns the tile's unique ID.
%End

    Qgis::TileRefinementProcess refinementProcess() const;
%Docstring
Returns the tile's refinement process.

Refinement determines the process by which a lower resolution parent tile's
content is handled when its higher resolution children are also included.

.. seealso:: :py:func:`setRefinementProcess`
%End

    void setRefinementProcess( Qgis::TileRefinementProcess process );
%Docstring
Sets the tile's refinement ``process``.

Refinement determines the process by which a lower resolution parent tile's
content is handled when its higher resolution children are also included.

.. seealso:: :py:func:`refinementProcess`
%End

    void setBoundingVolume( QgsAbstractTiledMeshNodeBoundingVolume *volume /Transfer/ );
%Docstring
Sets the bounding ``volume`` for the tile.

Ownership of ``volume`` is transferred to the tile.

.. seealso:: :py:func:`boundingVolume`
%End

    const QgsAbstractTiledMeshNodeBoundingVolume *boundingVolume() const;
%Docstring
Returns the bounding volume for the tile.

.. seealso:: :py:func:`setBoundingVolume`
%End

    void setTransform( const QgsMatrix4x4 &transform );
%Docstring
Sets the tile's ``transform``.

.. seealso:: :py:func:`transform`
%End

    const QgsMatrix4x4 *transform() const;
%Docstring
Returns the tile's transform. May be ``None`` if no transform is associated with the tile.

This represents the transformation which must be applied to all geometries from the tile
in order to transform them to the dataset's coordinate reference system.

.. seealso:: :py:func:`transform`
%End

    QVariantMap resources() const;
%Docstring
Returns the resources attached to the tile.

.. seealso:: :py:func:`setResources`
%End

    void setResources( const QVariantMap &resources );
%Docstring
Sets the ``resources`` ``attached`` to the tile.

.. seealso:: :py:func:`resources`
%End

    double geometricError() const;
%Docstring
Returns the tile's geometric error, which is the error, in mesh CRS units, of the tile's
simplified representation of its source geometry.

.. seealso:: :py:func:`setGeometricError`
%End

    void setGeometricError( double error );
%Docstring
Sets the tile's geometric ``error``, which is the error, in mesh CRS units, of the tile's
simplified representation of its source geometry.

.. seealso:: :py:func:`geometricError`
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/tiledmesh/qgstiledmeshtile.h                                *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
