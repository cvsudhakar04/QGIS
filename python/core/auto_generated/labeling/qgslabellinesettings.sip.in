/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/labeling/qgslabellinesettings.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/




class QgsLabelLineSettings
{
%Docstring

Contains settings related to how the label engine places and formats
labels for line features (or polygon features which are labeled in
a "perimeter" style mode).

.. versionadded:: 3.16
%End

%TypeHeaderCode
#include "qgslabellinesettings.h"
%End
  public:

    QgsLabeling::LinePlacementFlags placementFlags() const;
%Docstring
Returns the line placement flags, which dictate how line labels can be placed
above or below the lines.

.. seealso:: :py:func:`setPlacementFlags`
%End

    void setPlacementFlags( QgsLabeling::LinePlacementFlags flags );
%Docstring
Returns the line placement ``flags``, which dictate how line labels can be placed
above or below the lines.

.. seealso:: :py:func:`placementFlags`
%End

    bool mergeLines() const;
%Docstring
Returns ``True`` if connected line features with identical label text should be merged
prior to generating label positions.

.. seealso:: :py:func:`setMergeLines`
%End

    void setMergeLines( bool merge );
%Docstring
Sets whether connected line features with identical label text should be merged
prior to generating label positions.

.. seealso:: :py:func:`mergeLines`
%End

    void updateDataDefinedProperties( const QgsPropertyCollection &properties, QgsExpressionContext &context );
%Docstring
Updates the thinning settings to respect any data defined properties
set within the specified ``properties`` collection.
%End

    bool addDirectionSymbol() const;
%Docstring
Returns ``True`` if '<' or '>' (or custom strings set via leftDirectionSymbol and rightDirectionSymbol)
will be automatically added to the label text, pointing in the
direction of the line or polygon ring.

.. seealso:: :py:func:`setAddDirectionSymbol`

.. seealso:: :py:func:`leftDirectionSymbol`

.. seealso:: :py:func:`rightDirectionSymbol`

.. seealso:: :py:func:`placeDirectionSymbol`

.. seealso:: :py:func:`reverseDirectionSymbol`
%End

    void setAddDirectionSymbol( bool enabled );
%Docstring
Sets whether '<' or '>' (or custom strings set via leftDirectionSymbol and rightDirectionSymbol)
will be automatically added to the label text, pointing in the
direction of the line or polygon ring.

.. seealso:: :py:func:`addDirectionSymbol`

.. seealso:: :py:func:`setLeftDirectionSymbol`

.. seealso:: :py:func:`setRightDirectionSymbol`

.. seealso:: :py:func:`setPlaceDirectionSymbol`

.. seealso:: :py:func:`setReverseDirectionSymbol`
%End

    QString leftDirectionSymbol() const;
%Docstring
Returns the string to use for left direction arrows.

.. seealso:: :py:func:`setLeftDirectionSymbol`

.. seealso:: :py:func:`addDirectionSymbol`

.. seealso:: :py:func:`rightDirectionSymbol`
%End

    void setLeftDirectionSymbol( const QString &symbol );
%Docstring
Sets the string to use for left direction arrows.

.. seealso:: :py:func:`leftDirectionSymbol`

.. seealso:: :py:func:`addDirectionSymbol`

.. seealso:: :py:func:`rightDirectionSymbol`
%End

    QString rightDirectionSymbol() const;
%Docstring
Returns the string to use for right direction arrows.

.. seealso:: :py:func:`setRightDirectionSymbol`

.. seealso:: :py:func:`addDirectionSymbol`

.. seealso:: :py:func:`leftDirectionSymbol`
%End

    void setRightDirectionSymbol( const QString &symbol );
%Docstring
Sets the string to use for right direction arrows.

.. seealso:: :py:func:`setLeftDirectionSymbol`

.. seealso:: :py:func:`addDirectionSymbol`

.. seealso:: :py:func:`rightDirectionSymbol`
%End

    bool reverseDirectionSymbol() const;
%Docstring
Returns ``True`` if direction symbols should be reversed.

.. seealso:: :py:func:`setReverseDirectionSymbol`
%End

    void setReverseDirectionSymbol( bool reversed );
%Docstring
Sets whether the direction symbols should be ``reversed``.

.. seealso:: :py:func:`reverseDirectionSymbol`
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/labeling/qgslabellinesettings.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
