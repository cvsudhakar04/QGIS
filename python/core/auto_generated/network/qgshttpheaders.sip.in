/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/network/qgshttpheaders.h                                    *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsHttpHeaders
{
%Docstring(signature="appended")
This class implements simple http header management.

.. versionadded:: 3.24
%End

%TypeHeaderCode
#include "qgshttpheaders.h"
%End
  public:


    QgsHttpHeaders( const QMap<QString, QVariant> &headers );
%Docstring
Constructor from map

:param headers:
%End

    QgsHttpHeaders();
%Docstring
default constructor
%End

    QgsHttpHeaders( const QgsSettings &settings, const QString &key = QString() );
%Docstring
Constructor from :py:class:`QgsSettings` ``settings`` object and root ``key``

:param settings:
:param key:
%End

    QgsHttpHeaders( const QString &key );
%Docstring
Constructor from default :py:class:`QgsSettings` object and root ``key``

:param key:
%End

    QgsHttpHeaders( const QDomElement &element );
%Docstring
Constructor from a QDomElement ``element``

:param element:
%End

    virtual ~QgsHttpHeaders();

    bool updateSettings( QgsSettings &settings, const QString &key = QString() ) const;
%Docstring
Updates the ``settings`` by adding all the http headers in the path "key/KEY_PREFIX/"

:param settings:
:param key: sub group path

:return: ``True`` if the update succeed
%End

    bool updateNetworkRequest( QNetworkRequest &request ) const;
%Docstring
Updates a ``request`` by adding all the HTTP headers

:return: ``True`` if the update succeed
%End

    bool updateUrlQuery( QUrlQuery &uri ) const;
%Docstring
Updates an ``uri`` by adding all the HTTP headers

:return: ``True`` if the update succeed
%End

    bool updateMap( QVariantMap &map ) const;
%Docstring
Updates a ``map`` by adding all the HTTP headers

:return: ``True`` if the update succeed
%End

    bool updateDomElement( QDomElement &el ) const;
%Docstring
Updates a ``map`` by adding all the HTTP headers

:return: ``True`` if the update succeed
%End

    void setFromSettings( const QgsSettings &settings, const QString &key = QString() );
%Docstring
Loads headers from the ``settings``

:param settings:
:param key: sub group path
%End

    void setFromUrlQuery( const QUrlQuery &uri );
%Docstring
Loads headers from the ``uri``

:param uri:
%End

    void setFromMap( const QVariantMap &map );
%Docstring
Loads headers from the ``map``

:param map:
%End

    void setFromDomElement( const QDomElement &element );
%Docstring
Loads headers from the ``element``

:param element:
%End

    QString sanitizeKey( const QString &key ) const;
%Docstring
Returns a cleansed ``key``

:param key: a key to be sanitized
%End

    QVariant &operator[]( const QString &key );


    QList<QString> keys() const;
%Docstring

:return: the list of all http header keys
%End

    QString toSpacedString() const;
%Docstring
Returns key/value pairs as strings separated by space
%End


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/network/qgshttpheaders.h                                    *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
