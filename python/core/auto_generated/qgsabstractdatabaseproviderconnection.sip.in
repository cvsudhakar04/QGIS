/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsabstractdatabaseproviderconnection.h                     *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/



class QgsAbstractDatabaseProviderConnection : QgsAbstractProviderConnection
{
%Docstring
The QgsAbstractDatabaseProviderConnection class provides common functionality
for DB based connections, it performs low level DB operations without asking
the user for confirmation or handling currently opened layers and the registry
entries, it is responsability of the client code to keep layers in sync.
The class methods will throw exceptions in case the requested operation
is not supported or cannot be performed without errors.

.. versionadded:: 3.10
%End

%TypeHeaderCode
#include "qgsabstractdatabaseproviderconnection.h"
%End
  public:
    static const QMetaObject staticMetaObject;

  public:

    enum TableFlag
    {
      None,
      Aspatial,
      Vector,
      Raster,
      View,
      MaterializedView,
    };
    typedef QFlags<QgsAbstractDatabaseProviderConnection::TableFlag> TableFlags;


    struct TableProperty
    {

        SIP_PYOBJECT __repr__();
%MethodCode
        QString str = QStringLiteral( "<QgsAbstractDatabaseProviderConnection.TableProperty: '%1'>" ).arg( sipCpp->name );
        sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End

        QString                       schema;
        QString                       name;
        QString                       geometryColumn;
        QStringList                   pkColumns;
        QList<int>                    srids;
        unsigned int                  geometryColumnCount;
        TableFlags                    flags;
        QString                       tableComment;
        QString                       sql;

      public:

        void appendGeometryColumnType( const QgsWkbTypes::Type &type );
%Docstring
Appends the geometry column ``type`` to the geometry column types list
%End

        QList<int> geometryTypes();
%Docstring
Returns the list of geometry column types
%End

        int layerTypeCount() const;
%Docstring
Returns the number of layers that should be generated for this table.

The returned value is normally "1" but it may be greater in case the layer
is a vector layer and it contains more than a single geometry type.
%End

        QString  defaultName() const;
%Docstring
Returns the default name for the layer.
It is usually the table name but in case there are multiple geometry
columns, the geometry column name is appendend to the table name.
%End

        TableProperty at( int i ) const;
%Docstring
Returns the table property corresponding to the geometry type a the given indext ``i``
%End
    };

    enum Capability
    {
      CreateVectorTable,
      CreateRasterTable,
      DropTable,
      RenameTable,
      CreateSchema,
      DropSchema,
      RenameSchema,
      ExecuteSql,
      // TODO: Transaction = 1 << 9,   //!< Supports transactions when executing operations
      Vacuum,
      Tables,
      Schemas,
      SqlLayers,
      // TODO: TruncateTable = 1 << 14,      //!< Can TRUNCATE a table
    };

    typedef QFlags<QgsAbstractDatabaseProviderConnection::Capability> Capabilities;


    QgsAbstractDatabaseProviderConnection( const QString &name );
    QgsAbstractDatabaseProviderConnection( const QString &name, const QString &uri );


    Capabilities capabilities() const;
%Docstring
Returns connection capabilities
%End


    virtual void createVectorTable( const QString &schema,
                                    const QString &name,
                                    const QgsFields &fields,
                                    QgsWkbTypes::Type wkbType,
                                    const QgsCoordinateReferenceSystem &srs,
                                    bool overwrite,
                                    const QMap<QString, QVariant> *options
                                  ) throw( QgsProviderConnectionException );

    virtual void createRasterTable( const QString &schema,
                                    const QString &name ) throw( QgsProviderConnectionException );

    virtual void dropTable( const QString &schema, const QString &name ) throw( QgsProviderConnectionException );

    virtual void renameTable( const QString &schema, const QString &name, const QString &newName ) throw( QgsProviderConnectionException );

    virtual void createSchema( const QString &name ) throw( QgsProviderConnectionException );

    virtual void dropSchema( const QString &name, bool force = false ) throw( QgsProviderConnectionException );

    virtual void renameSchema( const QString &name, const QString &newName ) throw( QgsProviderConnectionException );

    virtual void executeSql( const QString &sql ) throw( QgsProviderConnectionException );

    virtual void vacuum( const QString &schema, const QString &name ) throw( QgsProviderConnectionException );

    virtual QList<QgsAbstractDatabaseProviderConnection::TableProperty> tables( const QString &schema = QString(),
        const QgsAbstractDatabaseProviderConnection::TableFlags &flags = QgsAbstractDatabaseProviderConnection::TableFlag::None ) throw( QgsProviderConnectionException );


    virtual QStringList schemas( ) throw( QgsProviderConnectionException );

  protected:


};

QFlags<QgsAbstractDatabaseProviderConnection::Capability> operator|(QgsAbstractDatabaseProviderConnection::Capability f1, QFlags<QgsAbstractDatabaseProviderConnection::Capability> f2);


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsabstractdatabaseproviderconnection.h                     *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
