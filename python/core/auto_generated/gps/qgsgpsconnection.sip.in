/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/gps/qgsgpsconnection.h                                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/






%ModuleHeaderCode
#include "qgsgpsconnection.h"
%End

class QgsSatelliteInfo
{
%Docstring(signature="appended")
Encapsulates information relating to a GPS satellite.
%End

%TypeHeaderCode
#include "qgsgpsconnection.h"
%End
  public:

    int id;

    bool inUse;


    double elevation;


    double azimuth;

    int signal;

    QChar satType;

    Qgis::GnssConstellation constellation() const;
%Docstring
Returns the GNSS constellation associated with the information.

.. versionadded:: 3.30
%End

    bool operator==( const QgsSatelliteInfo &other ) const;

    bool operator!=( const QgsSatelliteInfo &other ) const;

};

class QgsGpsInformation
{
%Docstring(signature="appended")
Encapsulates information relating to a GPS position fix.
%End

%TypeHeaderCode
#include "qgsgpsconnection.h"
%End
  public:

    double latitude;

    double longitude;

    double elevation;

    double elevation_diff;

    double speed;


    double direction;

    QList<QgsSatelliteInfo> satellitesInView;

    double pdop;

    double hdop;

    double vdop;

    //! Horizontal accuracy in meters
    double hacc;
    //! Vertical accuracy in meters
    double vacc;

    double hvacc;

    QDateTime utcDateTime;

    QChar fixMode;

    int fixType;

    QMap< Qgis::GnssConstellation, Qgis::GpsFixStatus > constellationFixStatus() const;
%Docstring
Returns a map of GNSS constellation to fix status.

.. versionadded:: 3.30
%End

    Qgis::GpsFixStatus bestFixStatus( Qgis::GnssConstellation &constellation /Out/ ) const;
%Docstring
Returns the best fix status and corresponding constellation.


:return: - best current fix status
         - constellation: will be set to the constellation with best fix status

.. versionadded:: 3.30
%End

    int quality;

    Qgis::GpsQualityIndicator qualityIndicator;

    int satellitesUsed;

    QChar status;

    QList<int> satPrn;

    bool satInfoComplete;

    bool isValid() const;
%Docstring
Returns whether the connection information is valid

.. versionadded:: 3.10
%End

 Qgis::GpsFixStatus fixStatus() const /Deprecated/;
%Docstring
Returns the fix status

.. deprecated::
  , use :py:func:`~QgsGpsInformation.constellationFixStatus` or :py:func:`~QgsGpsInformation.bestFixStatus` instead.
%End

    QString qualityDescription() const;
%Docstring
Returns a descriptive string for the signal quality.

.. versionadded:: 3.16
%End

    QVariant componentValue( Qgis::GpsInformationComponent component ) const;
%Docstring
Returns the value of the corresponding GPS information ``component``.

.. versionadded:: 3.30
%End

};

class QgsGpsConnection : QObject
{
%Docstring(signature="appended")
Abstract base class for connection to a GPS device
%End

%TypeHeaderCode
#include "qgsgpsconnection.h"
#include <qgsgpsdconnection.h>
#include <qgsnmeaconnection.h>
%End
%ConvertToSubClassCode
    if ( sipCpp->inherits( "QgsGpsdConnection" ) )
      sipType = sipType_QgsGpsdConnection;
    else if ( sipCpp->inherits( "QgsNmeaConnection" ) )
      sipType = sipType_QgsNmeaConnection;
    else
      sipType = NULL;
%End
  public:

    enum Status
    {
      NotConnected,
      Connected,
      DataReceived,
      GPSDataReceived
    };














    QgsGpsConnection( QIODevice *dev /Transfer/ );
%Docstring
Constructor

:param dev: input device for the connection (e.g. serial device). The class takes ownership of the object
%End
    ~QgsGpsConnection();
    bool connect();
%Docstring
Opens connection to device
%End
    bool close();
%Docstring
Closes connection to device
%End

    void setSource( QIODevice *source /Transfer/ );
%Docstring
Sets the GPS source. The class takes ownership of the device class
%End

    Status status() const;
%Docstring
Returns the status. Possible state are not connected, connected, data received
%End

    QgsGpsInformation currentGPSInformation() const;
%Docstring
Returns the current gps information (lat, lon, etc.)
%End

    QgsPoint lastValidLocation() const;
%Docstring
Returns the last valid location obtained by the device.

.. versionadded:: 3.30
%End

  signals:

    void stateChanged( const QgsGpsInformation &info );
%Docstring
Emitted whenever the GPS state is changed.
%End


    void nmeaSentenceReceived( const QString &substring );
%Docstring
Emitted whenever the GPS device receives a raw NMEA sentence.
%End

    void fixStatusChanged( Qgis::GpsFixStatus status );
%Docstring
Emitted when the GPS device fix status is changed.

.. versionadded:: 3.30
%End

    void positionChanged( const QgsPoint &point );
%Docstring
Emitted when the GPS position changes.

This signal is only emitted when the new GPS location is considered valid (see :py:func:`QgsGpsInformation.isValid()`).

.. versionadded:: 3.30
%End

  protected:

  protected slots:
    virtual void parseData() = 0;
%Docstring
Parse available data source content
%End

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/gps/qgsgpsconnection.h                                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
