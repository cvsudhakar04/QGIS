/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/annotations/qgsannotationitem.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsAnnotationItem
{
%Docstring
Abstract base class for annotation items which are drawn with QgsAnnotationLayers.

.. versionadded:: 3.12
%End

%TypeHeaderCode
#include "qgsannotationitem.h"
%End
  public:

    QgsAnnotationItem( const QgsCoordinateReferenceSystem &crs );


    virtual ~QgsAnnotationItem();

    virtual QgsAnnotationItem *clone() = 0 /Factory/;
%Docstring
Returns a clone of the item. Ownership is transferred to the caller.
%End

    virtual QString type() const = 0;
%Docstring
Returns a unique (untranslated) string identifying the type of item.
%End

    QgsCoordinateReferenceSystem crs() const;

    virtual void render( QgsRenderContext &context, QgsFeedback *feedback ) = 0;
%Docstring
Renders the item to the specified render ``context``.

The ``feedback`` argument can be used to detect render cancelations during expensive
render operations.
%End

    virtual bool writeXml( QDomElement &element, QDomDocument &document, const QgsReadWriteContext &context ) const = 0;
%Docstring
Writes the item's state the an XML ``element``.
%End

    int zIndex() const;

  private:
    QgsAnnotationItem( const QgsAnnotationItem &other );
};

class QgsMarkerItem : QgsAnnotationItem
{

%TypeHeaderCode
#include "qgsannotationitem.h"
%End
  public:

    QgsMarkerItem( QgsPointXY point, const QgsCoordinateReferenceSystem &crs );
    ~QgsMarkerItem();

    virtual QString type() const;

    virtual void render( QgsRenderContext &context, QgsFeedback *feedback );

    virtual bool writeXml( QDomElement &element, QDomDocument &document, const QgsReadWriteContext &context ) const;

    static QgsMarkerItem *create( QDomElement &element, const QgsReadWriteContext &context ) /Factory/;

    virtual QgsMarkerItem *clone() /Factory/;


    const QgsMarkerSymbol *symbol() const;
    void setSymbol( QgsMarkerSymbol *symbol /Transfer/ );

  private:
    QgsMarkerItem( const QgsMarkerItem &other );
};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/annotations/qgsannotationitem.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
