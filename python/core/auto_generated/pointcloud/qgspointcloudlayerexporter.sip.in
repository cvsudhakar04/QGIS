/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/qgspointcloudlayerexporter.h                     *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/




class QgsPointCloudLayerExporter /NoDefaultCtors/
{
%Docstring(signature="appended")

Handles exporting point cloud layers to memory layers, OGR supported files and PDAL supported files.

.. versionadded:: 3.28
%End

%TypeHeaderCode
#include "qgspointcloudlayerexporter.h"
%End
  public:

    QgsPointCloudLayerExporter( QgsPointCloudLayer *layer );
%Docstring
Constructor for QgsPointCloudLayerExporter, associated with the specified ``layer``.

.. note::

   The ``layer`` is safe to be deleted once it's used in the constructor.
%End

    QgsVectorLayer *exportToMemoryLayer() /Factory/;
%Docstring
Exports the point cloud layer to a memory layer.

Caller takes ownership of the returned object.
%End

    QgsVectorLayer *exportToVectorFile( const QString &filename = QString() ) /Factory/;
%Docstring
Exports the point cloud layer to a OGR vector file.
%End

    QgsPointCloudLayer *exportToPdalFile( const QString &filename = QString() ) /Factory/;
%Docstring
Exports the point cloud layer to a point cloud file, where the file type can be any format supported by PDAL.
%End

    void setFileName( const QString &filename );
%Docstring
Sets the name for the new layer.
%End
    void setLayerName( const QString &name );
%Docstring
Sets the name for the new layer.
%End
    void setFilterExtent( const QgsRectangle extent );
%Docstring
Sets a filter extent for points to be exported.
Points that fall outside the extent will be skipped.
%End
    void setZRange( const QgsDoubleRange zRange );
%Docstring
Sets an inclusive range for Z values to be exported.
Points with Z values outside the range will be skipped.
%End
    void setFeedback( QgsFeedback *feedback );
%Docstring
Sets a :py:class:`QgsFeedback` object to allow cancellation / progress reporting.

.. note::

   The ``feedback`` object must exist for the lifetime of the exporter.
%End
    void setAttributes( const QStringList &attributes );
%Docstring
Sets the list of point cloud ``attributes`` that will be exported.
If never called, all attributes will be exported.
%End

    void setNoAttributes();
%Docstring
Sets that no attributes will be exported.
%End
    void setCrs( const QgsCoordinateReferenceSystem &crs, const QgsCoordinateTransformContext &context = QgsCoordinateTransformContext() );
%Docstring
Sets the ``crs`` for the exported file, and the transfom ``context`` that will be used for
for reprojection if different from the point cloud layer's CRS.
%End
    bool setFormat( const QString &format );
%Docstring
Sets the format for the exported file.
If never called, the default format is GPKG for vector and COPC for pointcloud files.
%End

    QString format() const;
%Docstring
Returns the format for the exported file.
%End
    void setPointsLimit( qint64 limit );
%Docstring
Sets the maximum number of points to be exported.
%End
};



class QgsPointCloudLayerExporterTask : QgsTask
{
%Docstring(signature="appended")
:py:class:`QgsTask` task which performs a :py:class:`QgsPointCloudLayerExporter` layer export operation as a background
task. This can be used to export a point cloud layer out to a provider without blocking the
QGIS interface.

.. seealso:: :py:class:`QgsVectorFileWriterTask`

.. seealso:: :py:class:`QgsRasterFileWriterTask`

.. versionadded:: 3.28
%End

%TypeHeaderCode
#include "qgspointcloudlayerexporter.h"
%End
  public:

    QgsPointCloudLayerExporterTask( QgsPointCloudLayerExporter *exporter );
%Docstring
Constructor for QgsPointCloudLayerExporterTask. Takes a source ``layer``, destination ``uri``
and ``providerKey``, and various export related parameters such as destination CRS
and export ``options``. ``ownsLayer`` has to be set to ``True`` if the task should take ownership
of the layer and delete it after export.
%End

    virtual void cancel();


  signals:

    void exportComplete( QgsMapLayer * );
%Docstring
Emitted when exporting the layer is successfully completed.
%End

    void errorOccurred( Qgis::VectorExportResult error, const QString &errorMessage );
%Docstring
Emitted when an error occurs which prevented the layer being exported (or if
the task is canceled). The export ``error`` and ``errorMessage`` will be reported.
%End

  protected:

    virtual bool run();

    virtual void finished( bool result );


};
/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/qgspointcloudlayerexporter.h                     *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
