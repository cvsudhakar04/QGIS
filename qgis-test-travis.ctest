SET (CTEST_SOURCE_DIRECTORY $ENV{TRAVIS_BUILD_DIR})
SET (CTEST_BINARY_DIRECTORY "$ENV{TRAVIS_BUILD_DIR}/build")
#SET (CTEST_SOURCE_DIRECTORY /usr/src/QGIS)
#SET (CTEST_BINARY_DIRECTORY /usr/src/qgis-build)

SET( CTEST_CMAKE_GENERATOR  "Unix Makefiles" )
SET (CTEST_CMAKE_COMMAND "cmake" )
SET (CTEST_BUILD_COMMAND "/usr/bin/make -j2 -k" )
SET (CTEST_SITE "travis-ci.org" )
SET (CTEST_COVERAGE_COMMAND "/usr/bin/gcov" )
SET (CTEST_CUSTOM_COVERAGE_EXCLUDE "\(.*/tests/.*|.*\\.cxx|.*\\.sip|.*/sip_.*|.*/ui_.*|.*/qwtpolar.*\)\$" )
#SET (CTEST_MEMORYCHECK_COMMAND "/usr/bin/valgrind" )
IF ($ENV{TRAVIS_PULL_REQUEST} STREQUAL "false")
  # No pull request
  SET (CTEST_BUILD_NAME "$ENV{TRAVIS_BRANCH} ($ENV{TRAVIS_COMMIT})")
ELSE()
  SET (CTEST_BUILD_NAME "PR: $ENV{TRAVIS_PULL_REQUEST} / $ENV{TRAVIS_BRANCH} ($ENV{TRAVIS_COMMIT})")
ENDIF()
SET (CTEST_BUILD_CONFIGURATION "Debug")

SET(CMAKE_CXX_FLAGS_COVERAGE "-g -O0 -Xclang -coverage-cfg-checksum -Xclang -coverage-no-function-names-in-data -Xclang -coverage-version='406*' --coverage -fprofile-arcs -ftest-coverage" )
SET(CMAKE_C_FLAGS_COVERAGE "-g -O0 -Xclang -coverage-cfg-checksum -Xclang -coverage-no-function-names-in-data -Xclang -coverage-version='406*' --coverage -fprofile-arcs -ftest-coverage")
SET(CMAKE_EXE_LINKER_FLAGS_COVERAGE "-Xclang -coverage-cfg-checksum -Xclang -coverage-no-function-names-in-data -Xclang -coverage-version='406*' --coverage -fprofile-arcs -ftest-coverage")
SET(CMAKE_SHARED_LINKER_FLAGS_COVERAGE "-Xclang -coverage-cfg-checksum -Xclang -coverage-no-function-names-in-data -Xclang -coverage-version='406*' --coverage -fprofile-arcs -ftest-coverage" )
SET(COVERAGE_EXTRA_FLAGS "-l -p") #enable duplicate file names
 
SET (INITIAL_CACHE "
BUILDNAME:STRING=${CTEST_BUILD_NAME}
SITE:STRING=${CTEST_SITE}
CTEST_USE_LAUNCHERS:BOOL=ON
")

SET (CTEST_NOTES_FILES
${CTEST_SCRIPT_DIRECTORY}/${CTEST_SCRIPT_NAME}
${CTEST_BINARY_DIRECTORY}/CMakeCache.txt
)

# Requires a track on the CDash server
#ctest_start(Experimental TRACK Travis)
ctest_start(Experimental)
ctest_build (BUILD "${CTEST_BINARY_DIRECTORY}" RETURN_VALUE BUILDRES)
IF(NOT ${BUILDRES} EQUAL 0)
  ctest_submit ()
  MESSAGE( FATAL_ERROR "Build failed." )
ENDIF(NOT ${BUILDRES} EQUAL 0)
ctest_test (BUILD "${CTEST_BINARY_DIRECTORY}" PARALLEL_LEVEL 2 RETURN_VALUE TESTRES)
ctest_coverage( BUILD "${CMAKE_BINARY_DIR}")
IF(NOT ${TESTRES} EQUAL 0)
  ctest_submit ()
  MESSAGE( FATAL_ERROR "Test failed." )
ENDIF(NOT ${TESTRES} EQUAL 0)

ctest_submit (RETRY_COUNT 3 RETRY_DELAY 30)


